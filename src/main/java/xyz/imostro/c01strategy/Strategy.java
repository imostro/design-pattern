package xyz.imostro.c01strategy;


/**
 * 本章所讲的是面向接口编程。
 *
 * 在没学习面向接口编程之前，我们的编程可能针对于某种需求的实现来编程的，称之为面向实现编程。但是这种实现方法会带来维护上的麻烦，
 * 每当需求改变的时候，我们都要到对应的实现类中修改相应的代码。
 *
 * 但是面向接口编程给我们提供了另外一个思路，它把实现类中那些可能会经常变动的部分抽离出来然后使用接口对他进行抽象化。现在实现类只需要
 * 持有抽离的接口即可（不是继承接口，而是把它作为属性）。然后面对变化部分不同的要求，我们可以单独来实现继一个继承了抽离接口的类，然后
 * 让实现类引用该类即可。
 *
 * 这样做的好处：
 *  我们不用再去改动实现类部分的内容了，如果需求变更，我们只需要改变引用即可。
 *  它充分利用了Java多态性的特点
 *
 *
 *  探讨：
 *      并不是一开始都要这么去考虑实现，因为有时候有些功能很简单，未来变化也不会很大，如果采用接口编程会变得比较繁杂。
 *      但是我们在实现某个系统的时候可以先思考那些东西会经常变动，然后提前把它抽取出来，这样未来会省很多功夫。
 *
 *  扩展：
 *      类: 既有状态（属性）也有行为（方法）。
 *      设计时应该把具有相同的部分设计到类中。
 *
 *  本章内容：
 *      模拟鸭子应用             2
 *      Joe想到继承             5
 *      利用接口如何？           6
 *      软件开发的不变真理        8
 *      分开变化和不变部分       11
 *      测试鸭子的代码          18
 *      动态地设置行为          20
 *      封装行为的大局观        22
 *      “有一个”比是“是一个”好  23
 *      策略模式              24
 *      共享模式词汇的威力      28
 *      我们如何使用设计模式    29
 *      设计箱内的工具         32
 *      习题解答              34
 *
 *
 *      duck包 面向接口编程, 策略模式
 *
 *      面向对象的特性: (抽象), 封装, 继承, 多态
 *      原则:
 *          - 封装变化
 *          - 多用组合,少用继承
 *          - 针对接口编程, 不针对实现变化曾
 */
public class Strategy {


}
