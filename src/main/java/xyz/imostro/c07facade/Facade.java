package xyz.imostro.c07facade;

/**
 * 外观模式 提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。
 *
 * 最少知道原则：减少对象之间的交互，只留下几个“密友”。（只和你的密友交谈）
 *    意思就是说，客户不必要知道想要使用这个事情需要怎么去调用子系统的方法（多个不同的类的方法），而是把某个功能需要调用的子系统全部组装起来（只需要调用一个类的方法，这个类会帮我们把子系统的功能组合在一起），
 *    客户只需要调用该功能的接口即可。
 * 方针：
 *     就任何对象而言，在该对象的方法内，我们只应该调用属于以下范围的方法:
 *       - 该对象本身
 *       - 被当作方法的参数而传递进来的对象
 *       - 此方法所创建或实例化的任何对象
 *       (↑     即在一个方法中调用对象的层数不要超过1层，例如在一个方法中调用一个实例化对象属性中的方法放回对象的方法)
 *       public float getTemp(){
 *           Thermometer thermometer = station.geThermometer();
 *           return thermometer.geTemperature();
 *       }
 *       - 对象的任何组件（被实例化的任何对象，Has-A）
 */
public class Facade {

    public static void main(String[] args) {

    }
}
