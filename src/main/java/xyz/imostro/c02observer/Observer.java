package xyz.imostro.c02observer;

/**
 * 观察者模式 定义了对象之间的一对多依赖,这样一来,当一个对象改变状态时,它的所有依赖着都会收到他通知并自动更新
 *
 *  由用户主动去订阅消息,只有订阅了对应消息的用户采用收到消息更新的通知( 出版者+订阅者=观察者模式)
 *
 *  设计原则: 为了交互对象之间的松耦合设计而努力
 *
 *
 * 任务: 设计一个应用,由三种布告板分别显示
 *         - 目前的状况
 *         - 气象统计
 *         - 简单的预报
 * 必须是实时更新的
 *
 * 观察者的两种模式：
 *          - 推： 服务提供方每次更新消息会主动推送给订阅者
 *                  - 优点： 不用订阅者自己去获取
 *                  - 缺点： 每次推送可能订阅者只需要一点信息，但服务提供方会全部推送过去
 *          - 拉： 由服务方提醒订阅方，由订阅方主动去拉去数据
 *                  - 优点： 订阅者去拉去的时候可以只拉去自己需要的数据
 *                  - 缺点： 每次都要订阅方自己去拉去
 *
 *  Java内置的观察者模式支持
 *  主题：
 *  @see java.util.Observable
 *  不同的是他是一个类，而不是一个接口。而Java语言并不支持多继承，因此使用这个类会出现复用和扩展上的问题
 *  订阅者：
 *  @see java.util.Observer
 *
 *   上章设计原则:
 *      - 封装变化
 *      - 多用组合,少用继承（继承是编译时决定了类的关系的，而组合可以在运行时改变关系）
 *      - 针对接口编程, 不针对实现编程
 *
 *  本章设计原则： 为交互对象之间的松耦合设计而努力
 *
 *  观察者模式的代表：MVC模型
 */
public class Observer {
}
